# Instala pacote swirl
install.packages("swirl")
library(swirl)
select_language(language = 'portuguese')
install_course_github('elthonf','Aprenda_R_no_R')
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt=sqrt(z -1)
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
T == T
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & C(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
int -< sample(10)
int <- sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
install.packages("swirl")
library(swirl)
select_language(language = 'portuguese')
library(swirl)
uninstall_course('Aprenda_R_no_R')
install_course_github('elthonf','Aprenda_R_no_R')
swirl()
?sample
samples(1:6, 4, replace=T)
sample(1:6, 4, replace=T)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 100, prob=c(0.3, 0.7))
flips <- sample(0:1, 100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0:1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbimon
?rbinom
rbinom(1, size = 100, prob=0.7)
flips2 <- rbinom(c(0,1), 100, prob=c(0.3, 0.7))
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100,25)
:rpois
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois  <-replicate(100, rpois(5,10))
mu_pois
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function(_function("Minha primeira função!"))
boring_function("Minha primeira função!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9.8.8))
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sum, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x {x + 1}, 6))
evaluate(function(x) {x + 1}, 6)
evaluate(function(x) { x[1]}, c(8,4,0))
evaluate(function(x) { x[length(x)]}, c(8,4,0))
?paste
paste("Programar", "é", "divertido!")
submit()
telegram("teste")
submit()
mad_libs(place="TESTE", adjective="TTEESSTTEE", noun="TTTTTHHTTHTHT")
submit()
"EU" %p% "adoro" %p% "R!"
"Eu" %p% "adoro" %p% "R!"
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
sim(mydf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, coutry:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package== "swirl")
filter(cran, r_version == "3.1.1", country== "US")
filter(cran, C(r_version, "3.1.1"))
filter(cran, Comparison(r_version, "3.1.1"))
filter(cran)
?Comparison
filter(cran, r_version <= "3.0.2", country== "IN")
filter(cran, r_version <= "3.0.2", country== "IN" | country == "US")
filter(cran, country== "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, packge, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran2=3
cran3
mutate(cran3, size_mb= size / 2 ^ 20)
mutate(cran3, size_gb= size_mb / 2 ^ 20)
mutate(cran3, size_mb= size / 2 ^ 20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, correct_size= size - 1000)
mutate(cran3, correct_size= size + 1000)
summarize(cran, avg_bytes(mean(size)))
summarize(cran, avg_bytes= mean(size))
install.packages("swirl")
library(swirl)
select_language(language = 'portuguese')
library(swirl)
uninstall_course('Aprenda_R_no_R')
install_course_github('elthonf','Aprenda_R_no_R')
swirl
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = 'Velocidade')
plot(x = cars$speed, y = cars$dist, xlab = 'Velocidade', ylab = 'Distancia de parada')
plot(x = cars$speed, y = cars$dist, ylab = 'Distancia de parada')
plot(x = cars$speed, y = cars$dist, xlab = 'Velocidade', ylab = 'Distancia de parada')
plot(cars, main="Meu Plot")
?plot
plot(cars, sub="Meu subtitulo")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
head(mtacars)
head(mtcars)
?boxplot
boxplot(data=mtcars, formula=mpg ^cyl)
boxplot(data=mtcars, formula=mpg~cyl)
boxplot(mtcars, formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
cmat
plot(cx, cy, paste(cols1), pch=3, cex=2, lwd=2)
plot(cx, cy)
plot(cx, cy, col=ols1, pch=3, cex=2, lwd=2)
plot(cx, cy, col=cols1, pch=3, cex=2, lwd=2)
plot(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
distTmp <- mdist(x,y,cx,cy)
distTmp
combine(a)
c <- 3
c(3)
c(c)
c(c=c)
c <- function(c){ cbind(c)}
c(c)
c(1)
rm(c)
c <- function(c) { return(c)}
c(1)
c(1,2)
c(1)
c(1:9)
c(c=
1)
1
sessionInfo()
install.packages("ggplot2")
library(ggplot2)
getwd()
qplot()
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
install.packages("e1071")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
# Carregando os datasets
dataset <- read.csv("credit-card.csv")
# Idade
head(dataset$AGE)
dataset$AGE <- cut(dataset$AGE, c(0,30,50,100), labels = c("Jovem","Adulto","Idoso"))
head(dataset$AGE)
# Sexo
dataset$SEX <- cut(dataset$SEX, c(0,1,2), labels = c("Masculino","Feminino"))
head(dataset$SEX)
# Escolaridade
dataset$EDUCATION <- cut(dataset$EDUCATION, c(0,1,2,3,4),
labels = c("Pos Graduado","Graduado","Ensino Medio","Outros"))
head(dataset$EDUCATION)
# Estado Civil
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c(-1,0,1,2,3),
labels = c("Desconhecido","Casado","Solteiro","Outros"))
head(dataset$MARRIAGE)
# Convertendo a variavel que indica pagamentos para o tipo fator
dataset$PAY_0 <-as.factor(dataset$PAY_0)
dataset$PAY_2 <-as.factor(dataset$PAY_2)
dataset$PAY_3 <-as.factor(dataset$PAY_3)
dataset$PAY_4 <-as.factor(dataset$PAY_4)
dataset$PAY_5 <-as.factor(dataset$PAY_5)
dataset$PAY_6 <-as.factor(dataset$PAY_6)
# Alterando a variavel dependente para o tipo fator
dataset$default.payment.next.month <- as.factor(dataset$default.payment.next.month)
head(dataset)
str(dataset)
# Renomeando a coluna de classe
colnames(dataset)
colnames(dataset)[25] <- "inadimplente"
colnames(dataset)
# Verificando valores missing e removendo do dataset
sapply(dataset, function(x) sum(is.na(x)))
missmap(dataset, main = "Valores Missing Observados")
dataset <- na.omit(dataset)
# Removendo a primeira coluna ID
dataset$ID <- NULL
View(dataset)
# Total de inadimplentes versus nao-inadimplentes
table(dataset$inadimplente)
# Plot da distribuicao usando ggplot
qplot(inadimplente, data = dataset, geom = "bar") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Set the seed
set.seed(12345)
TrainingDataIndex <- createDataPartition(dataset$inadimplente, p = 0.45, list = FALSE)
TrainingDataIndex
# Criar Dados de Treinamento como subconjunto do conjunto de dados com numeros de indice de linha
# conforme identificado acima e todas as colunas
trainData <- dataset[TrainingDataIndex,]
table(trainData$inadimplente)
# Veja porcentagens entre as classes
prop.table(table(trainData$inadimplente))
# Numero de linhas no dataset de treinamento
nrow(trainData)
# Compara as porcentagens entre as classes de treinamento e dados originais
DistributionCompare <- cbind(prop.table(table(trainData$inadimplente)), prop.table(table(dataset$inadimplente)))
colnames(DistributionCompare) <- c("Treinamento", "Original")
DistributionCompare
# Melt Data - Converte colunas em linhas
meltedDComp <- melt(DistributionCompare)
meltedDComp
# Plot para ver a distribuicao do treinamento vs original - eh representativo ou existe sobre / sob amostragem?
ggplot(meltedDComp, aes(x = X1, y = value)) + geom_bar( aes(fill = X2), stat = "identity", position = "dodge") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Tudo o que nao esta no dataset de treinamento esta no dataset de teste. Observe o sinal - (menos)
testData <- dataset[-TrainingDataIndex,]
# Usaremos uma validacao cruzada de 10 folds para treinar e avaliar modelo
TrainingParameters <- trainControl(method = "cv", number = 10)
# Construindo o Modelo
rf_model <- randomForest(inadimplente ~ ., data = trainData)
rf_model
# Conferindo o erro do modelo
plot(rf_model, ylim = c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
# importancia das variaveis preditoras para as previsoes
varImpPlot(rf_model)
# importancia das variaveis preditoras para as previsoes
varImpPlot(rf_model)
# Obtendo as variaveis mais importantes
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
# Usando ggplot2 para visualizar a importancia relativa das variaveis
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()
# Previsoes
predictionrf <- predict(rf_model, testData)
# Confusion Matrix
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
cmrf
?randomForest
setwd("C:/Projetos/Import & Cleaning data in R")
# Importando arquivo csv
pools <- read.csv("DataSets/swissimming_pools.csv")
getwd()
# Importando arquivo csv
pools <- read.csv("DataSets/swimming_pools.csv")
str(pools)
# Importando arquivo csv com as colunas como Factors
poosl <- read.csv("swimming_pools.csv", stringsAsFactors = TRUE)
# Importando arquivo csv com as colunas como Factors
poosl <- read.csv("DataSets/swimming_pools.csv", stringsAsFactors = TRUE)
str(pools)
# Importando arquivo csv
pools <- read.csv("DataSets/swimming_pools.csv")
# Por padrão o read.csv já irá importar as strings como factor.
# para que isso não ocorra devemos definir o parametro StringsAsFactors como FALSE
pools <- read.csv("DataSets/swimming_pools.csv", stringsAsFactors = FALSE)
# Importando arquivo csv
pools <- read.csv("DataSets/swimming_pools.csv")
str(pools)
# Por padrão o read.csv já irá importar as strings como factor.
# para que isso não ocorra devemos definir o parametro StringsAsFactors como FALSE
pools <- read.csv("DataSets/swimming_pools.csv", stringsAsFactors = FALSE)
str(pools)
q()
q()
